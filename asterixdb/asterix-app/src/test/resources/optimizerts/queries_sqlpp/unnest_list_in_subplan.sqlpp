/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

drop  dataverse fuzzyjoin if exists;
create  dataverse fuzzyjoin;

use fuzzyjoin;


create type fuzzyjoin.DBLPType as
 closed {
  id : integer,
  dblpid : string,
  title : string,
  authors : string,
  misc : string
};

create type fuzzyjoin.TOKENSRANKEDADMType as
 closed {
  token : integer,
  rank : integer
};

create  nodegroup group1 if not exists  on
    asterix_nc1,
    asterix_nc2
;
create  dataset DBLP(DBLPType) primary key id WITH {"node-group":{"name":"group1"}};

create  dataset TOKENSRANKEDADM(TOKENSRANKEDADMType) primary key rank WITH {"node-group":{"name":"group1"}};

select element {'id':idDBLP,'tokens':tokensDBLP}
from  DBLP as paperDBLP
with  idDBLP as paperDBLP.id,
      tokensUnrankedDBLP as fuzzyjoin.`counthashed-word-tokens`(paperDBLP.title),
      tokensDBLP as (
      select element tokenRanked.rank
      from  tokensUnrankedDBLP as tokenUnranked,
            TOKENSRANKEDADM as tokenRanked
      where (tokenUnranked = tokenRanked.token)
      order by tokenRanked.rank
  )
;
