/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * Description     : Test that BTree index is used in query plan.
 *                 : Query predicate that skips one of the indexed
 *                 : fields of a composite index.
 *                 : Define the BTree index on a composite key (fname,age,lname)
 *                 : predicate => WHERE fname = ... and lname = ...
 * Expected Result : Success
 */

drop  dataverse test if exists;
create  dataverse test;

use test;

create type test.Emp as
 closed {
  id : bigint,
  fname : string,
  lname : string,
  age : bigint,
  dept : string
};

create  dataset employee(Emp) primary key id;

create  index idx_employee_fal  on employee (fname,age,lname) type btree;

select element l
from  employee as l
where ((l.fname = 'Julio') and (l.lname = 'Isa'))
;