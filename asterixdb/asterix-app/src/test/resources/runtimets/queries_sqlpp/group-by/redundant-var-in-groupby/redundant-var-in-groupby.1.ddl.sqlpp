/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
drop dataverse test if exists;
create dataverse test;
use test;

create type TweetType as open {
  id : int64
};

create dataset Tweets(TweetType) primary key id;

drop type NearbyBuildingType if exists;
create type NearbyBuildingType as open {
    buildingId: int64,
    buildingType : string,
    buildingLocation : point
};
create dataset NearbyBuildings(NearbyBuildingType) primary key buildingId;

create function annotateTweet(x) {
    LET nearby_buildings = (select r.buildingType as buildingType, count(r) as cnt
       from NearbyBuildings r
       where spatial_intersect(create_point(x.latitude, x.longitude), create_circle(r.buildingLocation, 3.0))
       group by r.buildingType)
    select x.*, nearby_buildings
};

