/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * Description  : Tests runtime optimizations of window functions
 * Expected Res : SUCCESS
 */

drop  dataverse test if exists;
create  dataverse test;

use test;

create function q1_sum_1_preceding_1_following(N) {
  from
    range(1, N) x
  let
    result_expected = 3 * x - (case x when N then x + 1 else 0 end),
    result_actual = sum(x) over (order by x range between 1 preceding and 1 following),
    result_delta = result_expected - result_actual
  select
    min(result_delta) min_delta,
    max(result_delta) max_delta
};

create function q2_max_unbounded_preceding_n_following(N) {
  let
    DBL_N = N * 2
  from
    range(1, DBL_N) x
  let
    result_expected = case when x > N then DBL_N else x + N end,
    result_actual = max(x) over (order by x range between unbounded preceding and N following),
    result_delta = result_expected - result_actual
  select
    min(result_delta) min_delta,
    max(result_delta) max_delta
}