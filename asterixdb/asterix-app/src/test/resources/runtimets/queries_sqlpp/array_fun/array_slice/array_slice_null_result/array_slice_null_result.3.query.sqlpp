/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

use TinySocial;

{
  "t1": (array_slice(null, 1) IS NULL),                 // array is null
  "t2": (array_slice(null, 1, 2) IS NULL),              // array is null
  "t3": (array_slice([0, 1, 2, 3], null) IS NULL),      // start is null
  "t4": (array_slice([0, 1, 2, 3], null, 3) IS NULL),   // start is null
  "t5": (array_slice([0, 1, 2, 3], 0, null) IS NULL),   // end is null
  "t6": (array_slice([0, 1, 2, 3], 1.5, 3) IS NULL),    // invalid start
  "t7": (array_slice([0, 1, 2, 3], 1, -2.3) IS NULL),   // invalid end
  "t8": (array_slice([0, 1, 2, 3], 2, 1) IS NULL),      // start > end
  "t9": (array_slice([0, 1, 2, 3], 10, 3) IS NULL),     // start > length
  "t10": (array_slice([0, 1, 2, 3], 1, 10) IS NULL),     // end > length
  "t11": (array_slice([0, 1, 2, 3], 4, 4) IS NULL),      // start = length
  "t12": (array_slice("non_array", 1, 2) IS NULL),      // Not an array
  "t13": (array_slice([0, 1, 2, 3], "0", 3) IS NULL),   // Invalid start
  "t14": (array_slice([0, 1, 2, 3], 0, "3") IS NULL),   // Invalid end
  "t15": (SELECT value array_slice(d1.followers, null) IS NULL FROM d1),    // start is null
  "t16": (SELECT value array_slice(d1.followers, null, 2) IS NULL FROM d1), // start is null
  "t17": (array_slice([0, 1, 2, 3], float("INF")) IS NULL),      // INF
  "t18": (array_slice([0, 1, 2, 3], float("NaN")) IS NULL),      // NaN
  "t19": (array_slice([0, 1, 2, 3], 1, float("INF")) IS NULL),   // INF
  "t20": (array_slice([0, 1, 2, 3], 2, float("NaN")) IS NULL)    // NaN
};

// t15 has MISSING value in first record, so result will actually be [ null, true ]
// t16 has MISSING value in first record, so result will actually be [ null, true ]