/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Verify that nested-recursion queries raise an error.
USE TestDataverse;

CREATE GRAPH Graph1 AS
    VERTEX (:Vertex1)
        PRIMARY KEY (_id)
        AS GenericDataset,
    EDGE (:Vertex1)-[:EDGE_1]->(:Vertex1)
        SOURCE KEY      (_id)
        DESTINATION KEY (_to_id)
        AS (
            FROM
                GenericDataset GD
            SELECT
                GD._id    AS _id,
                GD._to_id AS _to_id
        );

WITH
    GRAPH Graph2 AS
        VERTEX (:Vertex1)
            PRIMARY KEY (_id)
            AS GenericDataset,
        EDGE (:Vertex1)-[:EDGE_1]->(:Vertex1)
            SOURCE KEY      (_id)
            DESTINATION KEY (_to_id)
            AS (
                FROM
                    GRAPH Graph1
                        (v1:Vertex1)-[:EDGE_1+]->(v2:Vertex1)
                SELECT
                    v1._id AS _id,
                    v2._id AS _to_id
            )
FROM
    GRAPH Graph2
        (v1:Vertex1)-[:EDGE_1+]->(v2:Vertex1)
SELECT
    *;
