/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Subquery expressing anti-join of patterns, using aliases.
WITH
    GRAPH YelpGraph1 AS
        VERTEX (:User)
            PRIMARY KEY (user_id)
            AS Yelp.Users,
        VERTEX (:Review)
            PRIMARY KEY (review_id)
            AS Yelp.Reviews,
        EDGE (:Review)-[:MADE_BY]->(:User)
            SOURCE KEY      (review_id)
            DESTINATION KEY (user_id)
            AS (
                FROM
                    Yelp.Reviews R
                SELECT
                    R.review_id AS review_id,
                    R.user_id   AS user_id
            )
FROM
    GRAPH YelpGraph1
        (u:User)<-(r)
LET
    myUser = u,
    myReview = r
WHERE
    NOT EXISTS (
        WITH
            GRAPH YelpGraph2 AS
                VERTEX (:User)
                    PRIMARY KEY (user_id)
                    AS (
                        FROM
                            Yelp.Users U
                        WHERE
                            U.user_id = 1
                        SELECT VALUE
                            U
                    )
        FROM
            GRAPH YelpGraph2
                (innerU:User)
        LET
            myInnerUser = innerU
        WHERE
            myInnerUser.user_id = myUser.user_id
        SELECT VALUE
            1
    )
SELECT
    myUser.user_id     AS user_id,
    myReview.review_id AS review_id
ORDER BY
    u.user_id;