/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
SET `graphix.evaluation.prefer-indexnl` "false";

-- param compile-only:string=true
-- param optimized-logical-plan:string=true
-- param plan-format:string=string

EXPLAIN
LET
    totalMessages = (
        FROM
            GRAPH SNB.Native.SNBGraph
            MATCH
                (inner_m:Message)
        WHERE
            inner_m.creationDate < DATETIME("2011-04-30T09:09:38") AND
            inner_m.content IS NOT NULL
        SELECT VALUE
            COUNT(inner_m.id)
    )[0]
FROM
    GRAPH SNB.Native.SNBGraph
    MATCH
        (message:Message)
LET
    year           = GET_YEAR(message.creationDate),
    isComment      = NOT message.isPost,
    lengthCategory = CASE
        WHEN LENGTH(message.content) < 40
        THEN 0
        WHEN LENGTH(message.content) < 80
        THEN 1
        WHEN LENGTH(message.content) < 160
        THEN 2
        ELSE 3
    END
WHERE
    message.creationDate < DATETIME("2011-04-30T09:09:38") AND
    message.content IS NOT NULL
GROUP BY
    year,
    isComment,
    lengthCategory
SELECT
    year                             AS year,
    isComment                        AS isComment,
    lengthCategory                   AS lengthCategory,
    COUNT(*)                         AS messageCount,
    AVG(LENGTH(message.content))     AS averageMessageLength,
    SUM(LENGTH(message.content))     AS sumMessageLength,
    COUNT(*) * 100.0 / totalMessages AS percentageOfMessages
ORDER BY
    year DESC,
    isComment ASC,
    lengthCategory ASC;