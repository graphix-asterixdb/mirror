/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
SET `graphix.compiler.permit.unbounded-all-paths` "true";
SET `graphix.evaluation.prefer-indexnl` "true";

-- param compile-only:string=true
-- param optimized-logical-plan:string=true
-- param plan-format:string=string

EXPLAIN
FROM
    GRAPH SNB.Native.SNBGraph
        (:Person)-[k:KNOWS WHERE k.startId = 14]->(friend:Person),
        (friend)<-[:HAS_CREATOR]-(comment:Message)-[:REPLY_OF]->(post:Message),
        (post)-[:HAS_TAG]->(tag:Tag)-[:HAS_TYPE]->(:TagClass)-[:IS_SUBCLASS_OF*]->(tagClass:TagClass)
WHERE
    NOT comment.isPost AND
    post.isPost AND
    tagClass.name = "OfficeHolder"
GROUP BY
    friend
    GROUP AS g
LET
    tagNames = ( FROM g SELECT DISTINCT VALUE g.tag.name )
SELECT
    friend.id                  AS personId,
    friend.firstName           AS personFirstName,
    friend.lastName            AS personLastName,
    tagNames                   AS tagNames,
    COUNT(DISTINCT comment.id) AS replyCount
ORDER BY
    replyCount DESC,
    personId ASC
LIMIT
    10;