/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
SET `graphix.evaluation.prefer-indexnl` "true";

-- param compile-only:string=true
-- param optimized-logical-plan:string=true
-- param plan-format:string=string

FROM
    GRAPH SNB.Native.SNBGraph
        (person:Person WHERE person.id = 14),
        (person)-[:KNOWS{2,2}]->(friend:Person),
        (friend)-[:IS_LOCATED_IN]->(city:City)
LET
    friendPosts = (
        FROM
            GRAPH SNB.Native.SNBGraph
                (friend)<-[:HAS_CREATOR]-(post:Message WHERE post.isPost)
        SELECT VALUE
            post.id
    ),
    commonPosts = (
        FROM
            friendPosts fp,
            GRAPH SNB.Native.SNBGraph
                (commonPost:Message)-[:HAS_TAG]->(:Tag)<-[:HAS_INTEREST]-(person)
        WHERE
            fp /*+indexnl*/ = commonPost.id
        SELECT DISTINCT VALUE
            fp
    ),
    commonInterestScore = ARRAY_COUNT(commonPosts) - (ARRAY_COUNT(friendPosts) - ARRAY_COUNT(commonPosts))
WHERE
    ( ( GET_MONTH(friend.birthday) = 10 AND GET_DAY(friend.birthday) >= 21 ) OR
      ( GET_MONTH(friend.birthday) = (3 % 12) + 1 AND GET_DAY(friend.birthday) < 22 ) ) AND
    NOT EXISTS (
        FROM
            GRAPH SNB.Native.SNBGraph
                (person)-[:KNOWS]->(friend)
        SELECT
            1
    )
SELECT
    friend.id           AS personId,
    friend.firstName    AS personFirstName,
    friend.lastName     AS personLastName,
    commonInterestScore AS commonInterestScore,
    friend.gender       AS personGender,
    city.name           AS personCityName
ORDER BY
    commonInterestScore DESC,
    personId ASC
LIMIT
    10;