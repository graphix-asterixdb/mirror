/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

-- param compile-only:string=true
-- param optimized-logical-plan:string=true
-- param plan-format:string=string

EXPLAIN
FROM
    (
        FROM
            GRAPH SNB.Native.SNBGraph
                (person1:Person)-[:KNOWS]->(person2:Person),
                (person1)-[:IS_LOCATED_IN]->(city1:City)-[:IS_PART_OF]->(country1:Country),
                (person2)-[:IS_LOCATED_IN]->(city2:City)-[:IS_PART_OF]->(country2:Country)
        LET
            c1 = EXISTS (
                FROM
                    GRAPH SNB.Native.SNBGraph
                        (person1)<-[:HAS_CREATOR]-(:Message)-[:REPLY_OF]->(:Message)-[:HAS_CREATOR]->(person2)
                SELECT
                    1
            ),
            c2 = EXISTS (
                FROM
                    GRAPH SNB.Native.SNBGraph
                        (person1)<-[:HAS_CREATOR]-(:Message)<-[:REPLY_OF]-(:Message)-[:HAS_CREATOR]->(person2)
                SELECT
                    1
            ),
            c3 = EXISTS (
                FROM
                    GRAPH SNB.Native.SNBGraph
                        (person1)-[:LIKES]->(:Message)-[:HAS_CREATOR]->(person2)
                SELECT
                    1
            ),
            c4 = EXISTS (
                FROM
                    GRAPH SNB.Native.SNBGraph
                        (person1)<-[:HAS_CREATOR]-(:Message)<-[:LIKES]-(person2)
                SELECT
                    1
            ),
            c1c2Score = SWITCH_CASE(c1, TRUE, 4, FALSE, 0) + SWITCH_CASE(c2, TRUE, 1, FALSE, 0),
            c3c4Score = SWITCH_CASE(c3, TRUE, 10, FALSE, 0) + SWITCH_CASE(c4, TRUE, 1, FALSE, 0)
        WHERE
            country1.name = "Brazil" AND
            country2.name = "Mexico"
        SELECT DISTINCT
            person1.id            AS person1Id,
            person2.id            AS person2Id,
            city1.name            AS city,
            c1c2Score + c3c4Score AS score
    ) AS s
GROUP BY
    s.city
    GROUP AS g
LET
    result = (
        FROM
            g
        SELECT VALUE
            g.s
        ORDER BY
            g.s.score DESC
        LIMIT
            1
    )[0]
SELECT VALUE
    result
ORDER BY
    result.score DESC,
    result.person1Id ASC,
    result.person2Id ASC;
